# https://taskfile.dev

version: '3'

vars:
  NAMESPACE: dkp-over-dvp
  TMP_DIR: ./tmp
  SSH_DIR: "{{ .TMP_DIR }}/ssh"
  SSH_FILE_NAME: cloud
  SSH_PUB_KEY_FILE: "{{ .SSH_DIR }}/{{ .SSH_FILE_NAME }}.pub"
  SSH_PRIV_KEY_FILE: "{{ .SSH_DIR }}/{{ .SSH_FILE_NAME }}"
  PASSWORD_FILE: "{{ .TMP_DIR }}/password.txt"
  PASSWORD_HASH_FILE: "{{ .TMP_DIR }}/password-hash.txt"

tasks:
  default:
    silent: true
    desc: Preflight / Checks if all dependencies are installed
    cmds:
      - echo "âœ¨ Checking dependencies..."
      - |
        deps=("d8" "yq" "jq" "docker" "htpasswd")
        for dep in "${deps[@]}"; do
          if ! command -v "$dep" >/dev/null 2>&1; then
            echo "Required utility '$dep' not found!"
            exit 1
          fi
        done
        echo "All dependencies are installed!"

  init:
    silent: true
    cmds:
    - echo "âœ¨ Create dir structure"
    - mkdir -p {{ .TMP_DIR }}
    - mkdir -p "{{ .SSH_DIR }}"
    - cp config.example.yaml config.yaml
    status:
      - test -f "config.yaml"
      - test -d "{{ .TMP_DIR }}"
      - test -d "{{ .SSH_DIR }}"

  generate-password:
    desc: Preflight / Generate password for admin@deckhouse.io user
    silent: true
    cmds:
      - echo "âœ¨ Generating password"
      - date +%s | sha256sum | base64 | head -c 10 > {{ .PASSWORD_FILE }}
      - |
        echo $(cat {{ .TMP_DIR }}/password.txt) | htpasswd -BinC 10 "" | cut -d: -f2 | base64 -w0 > {{ .PASSWORD_HASH_FILE }}
      - echo "Generated password $(cat {{ .PASSWORD_FILE }})"
    status:
      - test -f "{{ .PASSWORD_FILE }}"
      - test -f "{{ .PASSWORD_HASH_FILE }}"

  generate-ssh-keys:
    desc: Preflight / Generate ssh keypair for jump-host
    silent: true
    deps:
    - init
    cmds:
      - echo "âœ¨ Generating ssh keypair"
      - yes | ssh-keygen -t ed25519 -b 1024 -f {{ .SSH_PRIV_KEY_FILE }} -N "" -C "cloud" -v
      - chmod 0600 "{{ .SSH_PUB_KEY_FILE }}"
      - chmod 0400 "{{ .SSH_PRIV_KEY_FILE }}"
    status:
      - test -f "{{ .SSH_PRIV_KEY_FILE }}"

  infra-deploy:
    desc: Create infra
    silent: true
    cmds:
      - echo "ðŸš€ Deploy infra"
      - d8 k apply -k ./infra
      - d8 k -n {{ .NAMESPACE }} wait --for=condition=Ready pod -l app=jump-host --timeout=300s

  infra-undeploy:
    desc: Remove infra
    silent: true
    aliases:
    - uninstall
    cmds:
      - echo "ðŸ’€ Undeploy infra"
      - d8 k delete -k ./infra || true
      - d8 k wait --for=delete namespace/{{ .NAMESPACE }} --timeout 300s || true

  render-kubeconfig:
    desc: Render kubeconfig for dvp-cloud-provider
    silent: true
    deps:
    - init
    - infra-deploy
    vars:
      SERVER:
        sh: echo https://$(d8 k -n d8-user-authn get ingress kubernetes-api -o json | jq .spec.rules[0].host -r)
      CERT:
        sh: d8 k -n d8-user-authn get secrets kubernetes-tls -o json | jq '.data."tls.crt"' -r
      TOKEN:
        sh: d8 k -n {{ .NAMESPACE }} get secret dkp-over-dvp -o json | jq -r '.data.token' | base64 -d
    cmds:
    - echo "âœ¨ Render kubeconfig"
    - |
        cat <<EOF > {{ .TMP_DIR }}/kubeconfig.yaml
        apiVersion: v1
        clusters:
        - cluster:
            server: {{ .SERVER }}
          name: dvp
        contexts:
        - context:
            cluster: dvp
            namespace: {{ .NAMESPACE }}
            user: {{ .NAMESPACE }}@dvp
          name: {{ .NAMESPACE }}@dvp
        current-context: {{ .NAMESPACE }}@dvp
        kind: Config
        preferences: {}
        users:
        - name: {{ .NAMESPACE }}@dvp
          user:
            token: {{ .TOKEN }}
        EOF

  update-secrets:
    desc: Update secrets (generate kubeconfig for dvp-cloud-provider, ssh keys, admin password)
    silent: true
    cmds:
    - task: render-kubeconfig
    - task: generate-ssh-keys
    - task: generate-password
    - echo "âœ¨ Update ssh keys"
    - |
        export SSH_PUB_KEY="$(cat {{ .SSH_PUB_KEY_FILE }})"
        yq eval --inplace '(select(.kind == "DVPClusterConfiguration").sshPublicKey) = env(SSH_PUB_KEY)' config.yaml
        yq eval --inplace '(select(.kind == "ConfigMap").data.ssh-pub-key) = env(SSH_PUB_KEY)' infra/jump-host/configmap.yaml
    - echo "Update kubeconfig"
    - |
        export KUBECONFIG_B64="$(cat {{ .TMP_DIR }}/kubeconfig.yaml | base64 -w 0)"
        yq eval --inplace '(select(.kind == "DVPClusterConfiguration").provider.kubeconfigDataBase64) = env(KUBECONFIG_B64)' config.yaml
    - echo "Update admin password"
    - |
      export PASSWORD_HASH="$(cat {{ .PASSWORD_HASH_FILE }})"
      yq eval --inplace '(select(.kind == "User" and .metadata.name == "admin").spec.password) = env(PASSWORD_HASH)' config.yaml

  bootstrap:
    silent: true
    desc: Bootstrap DKP over DVP via dhctl
    vars:
      JUMPHOST_EXT_IP:
        sh: d8 k -n {{ .NAMESPACE }} exec -it deployment/jump-host -- dig @resolver4.opendns.com myip.opendns.com +short
      JUMPHOST_NODEPORT:
        sh: d8 k -n {{ .NAMESPACE }} get svc jump-host -o json | jq '.spec.ports[] | select(.port==2222) | .nodePort'
    cmds:
    - echo "ðŸš€ Bootstrap DKP over DVP"
    - task: update-secrets
    - |
      docker run --pull=always -it \
        -v "${PWD}/config.yaml:/config.yaml" \
        -v "{{ .SSH_DIR }}:/tmp/.ssh/" \
        registry.deckhouse.ru/deckhouse/ce/install:stable \
            dhctl bootstrap \
            --config=/config.yaml \
            --ssh-agent-private-keys=/tmp/.ssh/cloud \
            --ssh-user=ubuntu \
              --ssh-bastion-port={{ .JUMPHOST_NODEPORT }} \
              --ssh-bastion-host={{ .JUMPHOST_EXT_IP }} \
              --ssh-bastion-user=user

  install:
    silent: true
    vars:
      start_time:
        sh: date +%s
    cmds:
    - task: infra-deploy
    - task: bootstrap
    - |
      export end_time=$(date +%s)
      difference=$((end_time - {{.start_time}}))
      date -ud "@$difference" +'%H:%M:%S'

  ssh-to-master:
    desc: SSH to first master node
    #silent: true
    vars:
      MASTER_NAME:
        sh: d8 k -n {{ .NAMESPACE }} get vm -l dvp.deckhouse.io/node-group=master -l dvp.deckhouse.io/cluster-prefix=dkp-ce-demo -o jsonpath="{.items[0].metadata.name}"
    cmds:
      - /usr/bin/ssh -i {{ .SSH_PRIV_KEY_FILE }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o 'ProxyCommand=d8 v port-forward --stdio=true {{ .MASTER_NAME }}.{{ .NAMESPACE }} 22' ubuntu@{{ .MASTER_NAME }}

  clean:
    cmds:
    - rm -rf {{ .TMP_DIR }}

  show-jumphost-info:
    desc: Show jumphost info
    silent: true
    vars:
      JUMPHOST_EXT_IP:
        sh: d8 k -n {{ .NAMESPACE }} exec -it deployment/jump-host -- dig @resolver4.opendns.com myip.opendns.com +short 2>/dev/null
      JUMPHOST_NODEPORT:
        sh: d8 k -n {{ .NAMESPACE }} get svc jump-host -o json | jq '.spec.ports[] | select(.port==2222) | .nodePort'
    cmds:
      - echo "jumphost {{ .JUMPHOST_EXT_IP }}:{{ .JUMPHOST_NODEPORT }}"
